html(ng-app="uber-dash")
  head
    title="Uber Dash Configurator"
    link(href="//fonts.googleapis.com/css?family=Open+Sans:400,300,600,700", rel="stylesheet", type="text/css")
    link(href="//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css", rel="stylesheet")
    meta(http-equiv="Content-Type", content="text/html; charset=utf-8")
    meta(http-equiv="Content-Language", content="en-us")
    meta(charset="utf-8")

    meta(name="viewport", content="width=device-width, user-scalable=no, minimum-scale=1")

    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black")

    meta(name="keywords", content="uber, amazon, dash")
    meta(name="description", content="Uber Dash Configurator")
    meta(name="author", content="Geoffrey Tisserand")
    meta(name="copyright", content="Geoffrey Tisserand 2015")

    link(rel="stylesheet", href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css")
    link(rel="stylesheet", href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css")
    link(rel="stylesheet", href="//api.mapbox.com/mapbox.js/v2.2.2/mapbox.css")

    script(src="//code.jquery.com/jquery-1.11.3.min.js")
    script(src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js")
    script(src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.min.js")
    script(src="//api.mapbox.com/mapbox.js/v2.2.2/mapbox.js")

    link(rel="shortcut icon", href="/favicon.ico")
    link(rel="stylesheet", href="/css/main.css")

  body(ng-controller="MainController")
    .container-fluid(ng-init="TOKEN = #{JSON.stringify(token)}")
      header.text-center
        h1
          b UBER
          | DASH
        h2 Get a ride with just a press of a button
        br
        a.btn.btn-lg.btn-default(href="https://medium.com/@geoffrey___/summon-uber-with-the-new-amazon-dash-button-876b54385dec" target="_blank")
          b 0. Read the Medium post to know how it works
        br
        br
        a.btn.btn-lg.btn-info(href="/login", ng-disabled="TOKEN") 1. Login in with <b>UBER</b>
        br
        br
        iframe(src="//ghbtns.com/github-btn.html?user=geoffrey&repo=uber-dash-configurator&type=star&count=true", frameborder="0", scrolling="0", width="160px", height="30px")

        a(href="//github.com/geoffrey/uber-dash-configurator", target="_blank")
          img(style="position: absolute; top: 0; right: 0; border: 0;", src="//camo.githubusercontent.com/52760788cde945287fbb584134c4cbc2bc36f904/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f77686974655f6666666666662e706e67", alt="Fork me on GitHub", data-canonical-src="//s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png")

      .main-container
        .overlay(ng-hide="TOKEN")
        .generator
          .row
          .row
            .col-md-4
              h3 2. Select your pickup & dropoff

              p Drag and drop the 2 markers on the map
              b.green green: pickup
              br
              b.red red: dropoff
              br

              #map

            .col-md-3
              h3 3. Select the product

              b.red(ng-show="products.length === 0")
                span(ng-show="TOKEN") Uber is not available at your pickup location!

              .product(ng-cloak, ng-repeat="product in products", ng-click="selectProduct($index)", ng-class="product.product_id === selectedProduct.product_id ? 'selected' : ''")
                .row
                  .col-md-3
                    img(ng-src="{{ product.image }}")
                  .col-md-9
                    b {{ product.display_name }}
                    br
                    span {{ product.description }}
                    br
                    span {{ product.capacity }} people
                    br
                    span ${{ product.price_details.minimum }} miniumum

            .col-md-5
              h3 4. Save the script
              p Create a new AWS IoT rule for your button using this personalized AWS Lambda script:
              b.red DO NOT SHARE THIS! IT CONTAINS YOUR UBER TOKEN - WHICH ALLOW ANYONE TO ORDER RIDES ON YOUR BEHALF.

              pre(ng-cloak).
                var AWS = require('aws-sdk');
                var https = require('https');
                
                const region = 'us-west-2';
                const s3_endpoint = 's3-us-west-2.amazonaws.com';
                const ses_endpoint = 'email.us-west-2.amazonaws.com';
                
                var ses = new AWS.SES({apiVersion: '2010-12-01'});
                const email = process.env.EMAIL; // ADD YOUR EMAIL HERE
                var to = [email];
                var from = email;
                
                var s3 = new AWS.S3();
                const s3_bucket = 'requestuber';
                const s3_key = 'request-id';
                
                const token = "{{ TOKEN }}";
                
                const uberx_id = 'a1111c8c-c720-46c3-8534-2fcdd730040d'; // UberX SF
                const uberblack_id = 'd4abaae7-f4d6-4152-91cc-77523e8165a4'; // UberBlack SF
                const successfully_cancelled_uber_status_code = 204;
                const successfully_requested_uber_status_code = 202;
                const uber_surge_pricing_status_code = 409;
                
                const start_latitude = {{ start_latitude }}
                const start_longitude = {{ start_longitude }},
                
                const single_click = 'SINGLE';
                const double_click = 'DOUBLE';
                const long_click = 'LONG';
                
                function callUber(event, context) { 
                    if (event.clickType === single_click) {
                        requestUber(event, context, uberx_id)
                    }
                    else if (event.clickType === double_click) {
                        requestUber(event, context, uberblack_id)
                    }
                    else if (event.clickType === long_click) {
                        cancelUber(event, context);
                    }
                    else {
                        context.fail(event);
                    }
                }
                
                function cancelUber(event, context) {
                    AWS.config.update({
                        'region': region,
                        'endpoint': s3_endpoint
                    });
                    
                    var params = {'Bucket': s3_bucket, 'Key': s3_key};
                    s3.getObject(params, function(err, data) {
                        if (err) console.log(err);
                        else {
                            var request_id = data.Body.toString();
                            
                            data = JSON.stringify(request_id);
                            
                            var headers = {
                                'Authorization':  'Bearer ' + token,
                                'Content-Type':   'application/json',
                                'Content-Length': Buffer.byteLength(data)
                            };
                        
                            var options = {
                                'host':    'api.uber.com',
                                'path':    '/v1/requests/' + request_id,
                                'method':  'DELETE',
                                'headers': headers
                            };
                            
                            var req = https.request(options, function(res) {
                                var body = '';
                                res.on('data', function (chunk) {
                                    body += chunk;
                                });
                                
                                res.on('end', function () {
                                    // Successfully cancelled Uber
                                    if (res.statusCode === successfully_cancelled_uber_status_code) {
                                        console.log('Uber cancelled. Status code: ' + res.statusCode);
                                    }
                                    context.done();
                                });
                            });
                            req.write(data);
                            req.end();
                        }
                    });
                }
                
                function requestUber(event, context, product_id) {
                    var data =  {
                        'product_id': product_id,
                        'start_latitude':  start_latitude,
                        'start_longitude': start_longitude
                    };
                    
                    data = JSON.stringify(data);
                
                    var headers = {
                        'Authorization':  'Bearer ' + token,
                        'Content-Type':   'application/json',
                        'Content-Length': Buffer.byteLength(data)
                    };
                
                    var options = {
                        'host':    'api.uber.com',
                        'path':    '/v1/requests',
                        'method':  'POST',
                        'headers': headers
                    };
                    
                    var req = https.request(options, function(res) {
                        var body = '';
                        res.on('data', function (chunk) {
                            body += chunk;
                        });
                    
                        res.on('end', function () {
                            var parsed = JSON.parse(body);
                          
                            // Successfully requested Uber
                            if (res.statusCode === successfully_requested_uber_status_code) {
                                // Save request_id to S3 in case the user wants to cancel the Uber
                                console.log('Uber requested. Status code: ' + res.statusCode);
                                
                                AWS.config.update({
                                    'region': region,
                                    'endpoint': s3_endpoint
                                });
                                
                                var params = {'Bucket': s3_bucket, 'Key': s3_key, Body: parsed.request_id};
                                s3.upload(params, function(err, data) {
                                    if (err) console.log(err);
                                    else console.log(data);
                
                                    context.done();
                                });
                            }
                            // Uber has surge pricing
                            else if (res.statusCode === uber_surge_pricing_status_code) {
                                // Send an email to confirm surge pricing
                                console.log('Surge pricing. Status code: ' + res.statusCode);
                                
                                AWS.config.update({
                                    'region': region,
                                    'endpoint': ses_endpoint
                                });
                                
                                var params = {
                                        Destination: {
                                            ToAddresses: to
                                        },
                                        Message: {
                                            Body: {
                                                Text: {
                                                    Data: 'Click here to accept surge pricing: ' + parsed.meta.surge_confirmation.href
                                                }
                                            },
                                            Subject: {
                                                Data: 'Accept surge pricing'
                                            }
                                        },
                                        Source: from
                                    };
                                
                                ses.sendEmail(params, function(err, data) {
                                    if (err) console.log(err);
                                    else     console.log(data);
                                    
                                    context.done();
                                });
                            }
                            else {
                                console.log('Uber request failed. Status code: ' + res.statusCode);
                                context.fail(event);
                            }
                        });
                    });
                
                    req.write(data);
                    req.end();
                }
                
                exports.handler = callUber;

    script(src="/js/app.js")

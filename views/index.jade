html(ng-app="uber-dash")
  head
    title="Uber Dash Configurator"
    link(href="http://fonts.googleapis.com/css?family=Open+Sans:400,300,600,700", rel="stylesheet", type="text/css")
    link(href="//maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css", rel="stylesheet")
    meta(http-equiv="Content-Type", content="text/html; charset=utf-8")
    meta(http-equiv="Content-Language", content="en-us")
    meta(charset="utf-8")

    meta(name="viewport", content="width=device-width, user-scalable=no, minimum-scale=1")

    meta(name="apple-mobile-web-app-capable", content="yes")
    meta(name="apple-mobile-web-app-status-bar-style", content="black")

    meta(name="keywords", content="uber, amazon, dash")
    meta(name="description", content="Uber Dash Configurator")
    meta(name="author", content="Geoffrey Tisserand")
    meta(name="copyright", content="Geoffrey Tisserand 2015")

    link(rel="stylesheet", href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css")
    link(rel="stylesheet", href="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap-theme.min.css")
    link(rel="stylesheet", href="//api.mapbox.com/mapbox.js/v2.2.2/mapbox.css")

    script(src="//code.jquery.com/jquery-1.11.3.min.js")
    script(src="//maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js")
    script(src="//ajax.googleapis.com/ajax/libs/angularjs/1.4.7/angular.min.js")
    script(src="//api.mapbox.com/mapbox.js/v2.2.2/mapbox.js")

    link(rel="shortcut icon", href="/favicon.ico")
    link(rel="stylesheet", href="/css/main.css")

  body(ng-controller="MainController")
    .container-fluid(ng-init="TOKEN = #{JSON.stringify(token)}")
      header.text-center
        h1
          b UBER
          | DASH
        h2 Get a ride with just a press of a button

        .text-center(ng-hide="TOKEN")
          br
          br
          a.btn.btn-lg.btn-default(href="/login", ng-disabled="processing") 1. Login in with <b>UBER</b>
        br
        iframe(src="https://ghbtns.com/github-btn.html?user=geoffrey&repo=uber-dash-configurator&type=star&count=true", frameborder="0", scrolling="0", width="160px", height="30px")

        a(href="https://github.com/geoffrey/uber-dash-configurator", target="_blank")
          img(style="position: absolute; top: 0; right: 0; border: 0;", src="https://camo.githubusercontent.com/52760788cde945287fbb584134c4cbc2bc36f904/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f77686974655f6666666666662e706e67", alt="Fork me on GitHub", data-canonical-src="https://s3.amazonaws.com/github/ribbons/forkme_right_white_ffffff.png")

      .overlay(ng-hide="TOKEN")
      .generator
        .row
        .row
          .col-md-4
            h3 2. Select your pickup/dropoff locations

            p Drag and drop the 2 markers on the map
            b.green green: pickup
            br
            b.red red: dropoff
            br

            #map

          .col-md-3
            h3 3. Select the product

            b.red(ng-show="products.length === 0")
              span(ng-show="TOKEN") Uber is not available at your pickup location!

            .product(ng-cloak, ng-repeat="product in products", ng-click="selectProduct($index)", ng-class="product.product_id === selectedProduct.product_id ? 'selected' : ''")
              .row
                .col-md-3
                  img(ng-src="{{ product.image }}")
                .col-md-9
                  b {{ product.display_name }}
                  br
                  span {{ product.description }}
                  br
                  span {{ product.capacity }} people
                  br
                  span ${{ product.price_details.minimum }} miniumum

          .col-md-5
            h3 4. Use the script
            p Create a new AWS IoT rule for your button using this AWS Lambda script:

            pre(ng-cloak).
              var https = require('https');

              var CONFIG = {
                uber_token:      "{{ TOKEN }}",
                product_id:      "{{ selectedProduct.product_id }}",
                start_latitude:  {{ start_latitude }},
                start_longitude: {{ start_longitude }},
                end_latitude:    {{ end_latitude }},
                end_longitude:   {{ end_longitude }},
              };

              function callUber(event, context) {
                var data =  {
                  product_id:      CONFIG.product_id,
                  start_latitude:  CONFIG.start_latitude,
                  start_longitude: CONFIG.start_longitude,
                  end_latitude:    CONFIG.end_latitude,
                  end_longitude:   CONFIG.end_longitude
                };

                data = JSON.stringify(data);

                var headers = {
                  'Authorization':  'Bearer ' + CONFIG.uber_token,
                  'Content-Type':   'application/json',
                  'Content-Length': Buffer.byteLength(data)
                };

                var options = {
                  host:    'api.uber.com',
                  path:    '/v1/requests',
                  method:  'POST',
                  headers: headers
                };

                var req = https.request(options, function(res) {
                  if (res.statusCode == 200) {
                    context.succeed(event);
                  } else if (context) {
                    context.fail(event);
                  }

                  res.on('data', function (chunk) {
                    console.log("" + chunk);
                  });
                });

                req.write(data);
                req.end();
              }

              exports.handler = callUber;

    script(src="/js/app.js")
